// Mocks generated by Mockito 5.4.4 from annotations
// in pill_line_a_i/test/features/video_stream/video_stream_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:typed_data' as _i6;

import 'package:mockito/mockito.dart' as _i1;
import 'package:pill_line_a_i/features/video_stream/domain/entities/message_entity.dart'
    as _i7;
import 'package:pill_line_a_i/features/video_stream/domain/entities/video_stream_entity.dart'
    as _i5;
import 'package:pill_line_a_i/features/video_stream/domain/repositories/video_stream_repository.dart'
    as _i2;
import 'package:pill_line_a_i/features/video_stream/domain/usecases/video_stream_usecase.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeVideoStreamRepository_0 extends _i1.SmartFake
    implements _i2.VideoStreamRepository {
  _FakeVideoStreamRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [VideoStreamUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockVideoStreamUseCase extends _i1.Mock
    implements _i3.VideoStreamUseCase {
  MockVideoStreamUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.VideoStreamRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeVideoStreamRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.VideoStreamRepository);

  @override
  _i4.Stream<_i5.VideoStreamEntity> get videoStreamState => (super.noSuchMethod(
        Invocation.getter(#videoStreamState),
        returnValue: _i4.Stream<_i5.VideoStreamEntity>.empty(),
      ) as _i4.Stream<_i5.VideoStreamEntity>);

  @override
  _i4.Stream<_i6.Uint8List> get videoFrameStream => (super.noSuchMethod(
        Invocation.getter(#videoFrameStream),
        returnValue: _i4.Stream<_i6.Uint8List>.empty(),
      ) as _i4.Stream<_i6.Uint8List>);

  @override
  _i4.Stream<_i7.MessageEntity> get messageStream => (super.noSuchMethod(
        Invocation.getter(#messageStream),
        returnValue: _i4.Stream<_i7.MessageEntity>.empty(),
      ) as _i4.Stream<_i7.MessageEntity>);

  @override
  _i4.Future<void> connectToStream() => (super.noSuchMethod(
        Invocation.method(
          #connectToStream,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> disconnectFromStream() => (super.noSuchMethod(
        Invocation.method(
          #disconnectFromStream,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> sendMessage(String? message) => (super.noSuchMethod(
        Invocation.method(
          #sendMessage,
          [message],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void updateVideoScale(double? scale) => super.noSuchMethod(
        Invocation.method(
          #updateVideoScale,
          [scale],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateVideoPosition(
    double? x,
    double? y,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #updateVideoPosition,
          [
            x,
            y,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void toggleVideoVisibility() => super.noSuchMethod(
        Invocation.method(
          #toggleVideoVisibility,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void handleIncomingMessage(String? message) => super.noSuchMethod(
        Invocation.method(
          #handleIncomingMessage,
          [message],
        ),
        returnValueForMissingStub: null,
      );
}
